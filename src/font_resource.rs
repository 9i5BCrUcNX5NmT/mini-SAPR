use bevy::prelude::*;

/// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –¥–ª—è —à—Ä–∏—Ñ—Ç–∞
#[derive(Resource)]
pub struct GlobalFont {
    pub handle: Handle<Font>,
}

/// –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
pub fn setup_global_font(mut commands: Commands, asset_server: Res<AssetServer>) {
    // –í–ê–†–ò–ê–ù–¢ 1: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π —à—Ä–∏—Ñ—Ç
    let font_path = r"fonts/Hack/HackNerdFont-Regular.ttf";
    let font_handle = asset_server.load(font_path);

    // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info!("üî§ –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç: {}", font_path);
    info!("üîó Handle —à—Ä–∏—Ñ—Ç–∞: {:?}", font_handle);

    commands.insert_resource(GlobalFont {
        handle: font_handle,
    });
}

// /// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º Bevy
// pub fn setup_builtin_font(mut commands: Commands) {
//     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç Bevy (FiraSans)
//     let builtin_font = Handle::<Font>::default();

//     info!("üî§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç Bevy");

//     commands.insert_resource(GlobalFont {
//         handle: builtin_font,
//     });
// }

// /// –°–∏—Å—Ç–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —à—Ä–∏—Ñ—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤ –±–∏–Ω–∞—Ä—å)
// pub fn setup_embedded_font(mut commands: Commands, asset_server: Res<AssetServer>) {
//     // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø—Ä—è–º–æ –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
//     // –°–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—Å—Ç–∏—Ç–µ Roboto-Regular.ttf –≤ src/assets/
//     const FONT_DATA: &[u8] =
//         include_bytes!("../assets/fonts/Roboto/Roboto-Italic-VariableFont_wdth,wght.ttf");

//     // –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –±–∞–π—Ç–æ–≤
//     let font =
//         Font::try_from_bytes(FONT_DATA.to_vec()).expect("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç");

//     // –î–æ–±–∞–≤–ª—è–µ–º –≤ Assets –≤—Ä—É—á–Ω—É—é
//     let mut font_assets = commands
//         .insert_resource::<Assets<Font>>()
//         .expect("Assets<Font> –Ω–µ –Ω–∞–π–¥–µ–Ω");
//     let font_handle = font_assets.add(font);

//     info!("üî§ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±–∞–π—Ç–æ–≤");

//     commands.insert_resource(GlobalFont {
//         handle: font_handle,
//     });
// }
